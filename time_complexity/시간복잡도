#시간 복잡도란? Time Complexity

시간 복잡도는 특정 알고리즘이 얼마나 빠르게 수행이 되는지 표현하기 위해 사용된다.
시간 복잡도는 알고리즘의 실행 시간.

※시간 복잡도의 종류

1.빅오 big-O 표기법 

■ 시간의 상한 (최악의 경우 worst case)
■ 해당 알고리즘은 big-O보다 오래 걸릴 수 없다.

수학적 식으로 표현하면

N >= n0 일때 모든 N에 대해 T(N) <= cf(N) 인 양수 c와 n0가 존재하면, T(N) <= Of(N)이라고 표현할 수 있다.

정리 :
만약 T(N) = am * N^m + am-1 * N^m-1 + ... + a0 이면 T(N) = O(N^m) 이다.

ex) T(N) = 1000N , T(N) = O(N^2) 이다. 왜냐면 1000N <= N2 이면 N>= 1000 이기때문에.

O(1) < O(logn) < O(n) < O(nlogn) < O(n^2) < O(2^n)순으로 정리할 수 있다.

2. 오메가 Omega 표기법

■ 시간의 하한 (최선의 경우 best case)
■ 해당 알고리즘은 Omega보다 더 빠를 수 없다.

수학적 식으로 표현하면

N >= n0 일때 모든 N에 대해 T(N) >= cf(N) 인 양수 c와 n0가 존재하면 T(N) = Ω(f(N)) 이다.

정리 :
만약 T(N) = am * N^m + am-1 * N^m-1 + ... + a0 이고 am>0 이면 T(N) = Ω(N^m) 이다.

3. 세타 Theta 표기법

■ 평균적인 경우.
■ 빅오와 오메가를 하나로 합쳐 표현한것.
